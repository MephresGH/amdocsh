#!/usr/bin/env bash

# shellcheck disable=SC2016

clear_overclock() {
	printf "auto\n" | sudo tee "$cardnum"/device/power_dpm_force_performance_level
	printf "r\n" | sudo tee "$cardnum"/device/pp_od_clk_voltage
	printf "2\n" | sudo tee "$cardnum"/device/hwmon/hwmon*/pwm1_enable
	printf "c\n" | sudo tee "$cardnum"/device/pp_od_clk_voltage
}

uninstall_amdocsh() {
	if [[ -f /etc/systemd/system/amdocsh.service ]]; then
		sudo systemctl disable --now amdocsh.service
		sudo systemctl daemon-reload
	else
		printf "Error: no service file has been found, resetting settings now\n"
	fi

	printf "Removing all systemd services and /usr/bin/ entries.\n\n"
	clear_overclock
	sudo rm /etc/systemd/system/amdocsh.service
	sudo rm /usr/bin/amdocshstart /usr/local/bin/amdocshreset
	sensors
	printf "\n%sThe script and its components have been removed. \
	\nAny and all values executed via the script have been resetted.\n" "$gpu_information"
	exit 0
}

reset_overclock() {
	clear
	clear_overclock
	sensors
	printf "\n%s\nAll values performed by the overclock have been resetted.\n" "$gpu_information"
	exit 0
}

test_gpu() {
	while :; do
		case "$run_once" in
		0 | "") if [[ -f /usr/bin/gputest ]]; then
			printf "\nRunning basic stress test. \
				\nNOTE: Some users might need to run the stress test in fullscreen. \
				\nPlease wait 10 minutes.\n"

			if [[ -f /usr/bin/mangohud ]]; then
				printf "Running furmark with mangohud for 10 minutes.\n"
				mangohud_config="fps_limit=0,font_size=15,full"
			fi

			printf "Running furmark for 10 minutes.\n"
			$mangohud_config timeout 600s gputest /fullscreen /test=fur
			run_once=1
			return 0
		elif [[ ! -f /usr/bin/gputest ]]; then
			printf "\nGPUTest isn't installed, aborting stress test."
			return 1
		fi ;;
		1 | *) while read -rp "Warning: stress tests were already run. Are you sure you want to re-run the test? (Y/N) " yn; do
			case "$yn" in
			[Yy])
				run_once=0
				break
				;;
			[Nn])
				printf "\nReturning to the previous menu.\n"
				return 3
				;;
			esac
		done ;;
		esac
	done
}

setup_amdocsh() {
	clear
	case "$setup_done" in
	0 | "")
		setup_done=1
		printf "GPU temperatures and conditions:\n\n%s \
		\n\nSetting up systemd services and moving scripts to /usr/bin/.\n\n" "$(sensors)"
		sudo cp "$scriptpath"/amdocsh{reset,start} /usr/bin/
		sudo cp "$scriptpath"/amdocsh.service /etc/systemd/system/
		sudo chmod 744 /usr/bin/amdocshstart /usr/bin/amdocshreset
		sudo chmod 644 /etc/systemd/system/amdocsh.service
		sudo systemctl daemon-reload
		sudo systemctl enable --now amdocsh.service
		while read -rp "Do you want to view the contents of the scripts? (Y/N|[RETURN]) " yn; do
			case "$yn" in
			[Yy])
				less -N "$scriptpath"/amdocshstart "$scriptpath"/amdocshreset
				break
				;;
			[Nn] | "") break ;;
			*) printf "%s\n" "$error_msg" ;;
			esac
		done
		;;
	esac

	while :; do
		read -rp "Do you want to start the process or run a stability test? ([S]tart/[T]est/[E]xit) " ste
		case "$ste" in
		[Ss])
			printf "\nStarting service.\n\n"
			sudo systemctl enable --now amdocsh.service || error=1
			break
			;;
		[Tt]) test_gpu ;;
		[Ee])
			printf "\nAborted.\n"
			nostart_service=1
			break
			;;
		*) printf "%s\n" "$error_msg" ;;
		esac
	done

	if [[ -n "$nostart_service" ]]; then
		printf "The service wasn't started. Please reboot your machine to finish the setup.\n"
		exit 2
	elif [[ -n "$error" ]]; then
		printf "An error has occurred in the setup process.\n"
		exit 1
	else
		printf "The installation has finished. \
		\nTo remove all associated files, run the uninstall option of this script.\n"
		exit 0
	fi
}

check_if_services_installed() {
	clear
	if [[ -f /lib/systemd/system/amdocsh.service ]]; then
		printf "Error: components already installed \
		\nPlease run the uninstall segment of this script first to continue.\n"
		exit 1
	elif ! cd "$scriptpath"; then
		printf "Error: path to the script not found, exiting\n"
		exit 1
	else
		rm "$scriptpath"/amdocshstart "$scriptpath"/amdocshreset 2>/dev/null
	fi
}

set_power_profile() {
	clear
	power_profiles=(auto low high manual profile_standard profile_min_sclk profile_min_mclk profile_peak)
	{
		printf '#!/bin/sh\nset -vex\n\nif [ ! "${EUID:-$(id -u)}" -eq 0 ]; then\n\techo "Error: script is not run as root"\n\texit 3\nfi\n'
		printf '\nif find %s/ -type d; then' "$cardnum"
		printf '\n\tdevdir=$(find %s/device | tail -n1)\n' "$cardnum"
		printf '\thmondir=$(find %s/device/hwmon/hwmon* -type d | head -n1)\n' "$cardnum"
	} >>"$scriptpath"/amdocshstart
	printf "\nCurrent values:\n%s\n\n" "$gpu_information"
	printf "\nThe following performance profiles are available:\n\n%s\n\n" \
		"$(cat "$cardnum"/device/pp_power_profile_mode)"

	for i in "${power_profiles[@]}"; do
		printf "%s\n" "$i"
	done

	while read -rp "Enter a valid power profile or press enter/type 'skip': " power_prof; do
		case "$power_prof" in
		"skip" | "")
			skip_power_profiles=1
			break
			;;
		"auto" | "low" | "high" | "manual" | "profile_standard" | "profile_min_sclk" | "profile_min_mclk" | "profile_peak")
			skip_power_profiles=2
			break
			;;
		*)
			if printf 'manual' | sudo tee "$cardnum"/device/power_dpm_force_performance_level &&
				printf "%s\n" "$power_prof" | sudo tee "$cardnum"/device/pp_power_profile_mode; then
				{
					printf '\techo "manual" >"%s"/power_dpm_force_performance_level' '$devdir'
					printf '\n\techo "%s" >"%s"/pp_power_profile_mode\n' "$power_prof" '$devdir'
				} >>"$scriptpath"/amdocshstart
				break
			else
				printf "\n%s\n\n" "$error_msg"
			fi
			;;
		esac
	done
}

set_power_draw() {
	clear
	current_power=$(cat "$cardnum"/device/hwmon/hwmon*/power1_cap)
	printf "This section allows to set a custom power draw limit. \
	\n\nExampe limit: %s60.00W%s\nExample input: %s60%s \
	\n\nCurrent power limit:\n%s.00W\n" \
		"$underline" "$normal" \
		"$underline" "$normal" "${current_power%%000000}"
	default_power=$(cat "$cardnum"/device/hwmon/hwmon*/power1_cap_default)
	printf "\nDefault power limit:\n%s.00W\n" "${default_power%%000000}"
	max_power=$(cat "$cardnum"/device/hwmon/hwmon*/power1_cap_max)
	printf "\nMaximum power limit:\n%s.00W\n" "${max_power%%000000}"
	min_power=$(cat "$cardnum"/device/hwmon/hwmon*/power1_cap_min)
	printf "\nMinimum power limit:\n%s.00W\n\n" "${min_power%%000000}"
	while read -rp "Enter a valid power limit or press enter/type 'skip': " power; do
		case "$power" in
		"skip" | "") break ;;
		*) if printf "%s000000\n" "$power" | sudo tee "$cardnum"/device/hwmon/hwmon*/power1_cap; then
			printf '\techo "%s000000" >"%s"/power1_cap\n' "$power" '$hmondir' >>"$scriptpath"/amdocshstart
			break
		else
			printf "%s\n\n" "$error_msg"
		fi ;;
		esac
	done
}

set_fan_speed() {
	clear
	printf "This section allows for custom fan speed settings.\n \
	\nMaximum fan speed:\n100%%\n\nMinimum fan speed:\n0%%\n\n"
	while read -rp "Choose a valid fan speed or press enter/type 'skip': " fan; do
		case "$fan" in
		"skip" | "") break 2 ;;
		*[a-zA-Z]*) printf "%s\n\n" "$error_msg" ;;
		*) if [[ -n "$fan" ]]; then
			calc=$(printf "%.0f\n" "$(printf "%s*2.55\n" "$fan" | bc -l 2>/dev/null)")
			if printf "1" | sudo tee "$cardnum"/device/hwmon/hwmon*/pwm1_enable >/dev/null &&
				printf "%s\n" "$calc" | sudo tee "$cardnum"/device/hwmon/hwmon*/pwm1; then
				printf '\techo "1" >"%s"/pwm1_enable\n\techo "%s" >"%s"/pwm1\n' '$hmondir' "$calc" '$hmondir' >>"$scriptpath"/amdocshstart
				break 2
			fi
		else
			printf "%s\n\n" "$error_msg"
		fi ;;
		esac
	done
}

clocks_and_voltage() {
	while :; do
		clear
		printf "The following core/memory clock ranges, profiles and voltage values are available:\n%s\n\n" "$gpu_information"
		printf "%sIMPORTANT NOTES: \
increasing the base clock speeds may cause crashes, graphical artifacts and could damage your hardware.%s\n\n" "$red" "$normal"
		printf "%score, memory and voltage offset will be applied in this segment of the script in separate lines.%s\n\n" "$yellow" "$normal"
		printf "Core (s)/memory (m), profile setting examples (0, 1,etc.) and frequency:\n%ss 1 1500\nm 1 1000%s\n\n" "$underline" "$normal"
		printf "Voltage offset example:\n\n%svo -30\nvo +10%s\n\n" "$underline" "$normal"
		read -rp "Enter a valid core/memory profile to overclock/undervolt or press enter/type 'skip': " corememvolt
		case "$corememvolt" in
		"skip" | "") break ;;
		*) if ! grep -q "$(printf "%s" "$corememvolt" | head -c3)" "$scriptpath"/amdocshstart; then
			if printf "%s\n" "$corememvolt" | sudo tee "$cardnum"/device/pp_od_clk_voltage; then
				printf '\techo "%s" >"%s"/pp_od_clk_voltage\n' "$corememvolt" '$devdir' >>"$scriptpath"/amdocshstart
				while read -rp "Do you want to enter more variables? (Y/N|[RETURN]) " yn; do
					case "$yn" in
					[Yy])
						clear
						break
						;;
					[Nn] | "") break 2 ;;
					*) printf "%s\n\n" "$error_msg" ;;
					esac
				done
			else
				clear
				printf "%s\n\n" "$error_msg"
			fi
		else
			clear
			printf "Error: setting already exists in script or is too short\n\n"
		fi ;;
		esac
	done
}

core_profile() {
	clear
	if [[ -z "$skip_power_profiles" ]]; then
		while read -rp "Do you want to apply a persistent GPU core profile? (Y/N|[RETURN]) " yn; do
			case "$yn" in
			[Yy])
				printf "\nProceeding\n\nThe following core profiles are available:\n%s\n" "$(cat "$cardnum"/device/pp_dpm_sclk)"
				while read -rp "Enter a valid core profile or press enter/type 'skip': " coreprof; do
					case "$coreprof" in
					"skip" | "") break 2 ;;
					*) if printf "%s" "$coreprof" | sudo tee "$cardnum"/device/pp_dpm_sclk; then
						printf '\techo "%s" >"%s"/pp_dpm_sclk\n' "$coreprof" '$devdir' >>"$scriptpath"/amdocshstart
						break 2
					else
						printf "%s\n\n" "$error_msg"
					fi ;;
					esac
				done
				;;
			[Nn] | "") break ;;
			*) printf "%s\n\n" "$error_msg" ;;
			esac
		done
	else
		printf "Skipping...\n"
	fi
}

memory_profile() {
	clear
	if [[ -z "$skip_power_profiles" ]]; then
		while read -rp "Do you want to apply a persistent GPU memory profile? (Y/N|[RETURN]) " yn; do
			case "$yn" in
			[Yy])
				printf "\nProceeding\n\nThe following memory profiles are available:\n%s\n" "$(cat "$cardnum"/device/pp_dpm_mclk)"
				while read -rp "Enter a valid memory profile or press enter/type 'skip': " memprof; do
					case "$memprof" in
					"skip" | "") break 2 ;;
					*) if printf "%s" "$memprof" | sudo tee "$cardnum"/device/pp_dpm_mclk; then
						printf '\techo "%s" >"%s"/pp_dpm_mclk\n' "$memprof" '$devdir' >>"$scriptpath"/amdocshstart
						break 2
					else
						printf "%s\n\n" "$error_msg"
					fi ;;
					esac
				done
				;;
			[Nn] | "") break 2 ;;
			*) printf "%s\n\n" "$error_msg" ;;
			esac
		done
	elif [[ "$skip_power_profiles" = 2 ]]; then
		if printf "%s" "$power_prof" | sudo tee "$cardnum"/device/power_dpm_force_performance_level; then
			{
				printf '\techo "%s" >"%s"/power_dpm_force_performance_level\n' "$power_prof" '$devdir'
			} >>"$scriptpath"/amdocshstart
		fi
	else
		printf "Skipping...\n"
	fi

	printf '\techo "c" >"%s"/pp_od_clk_voltage\nelse\n\texit 1\nfi' '$devdir' >>"$scriptpath"/amdocshstart
}

create_reset_script() {
	{
		printf '#!/bin/sh\nset -vex\n\nif [ ! "${EUID:-$(id -u)}" -eq 0 ]; then\n\techo "Error: script is not run as root"\n\texit 3\nfi\n'
		printf "\nif find %s/ -type d; then" "$cardnum"
		printf '\n\tdevdir=$(find %s/device | tail -n1)' "$cardnum"
		printf '\n\thmondir=$(find %s/device/hwmon/hwmon* -type d | head -n1)' "$cardnum"
		printf '\n\techo "auto" >"%s"/power_dpm_force_performance_level' '$devdir'
		printf '\n\techo "r" >"%s"/pp_od_clk_voltage' '$devdir'
		printf '\n\techo "2" >"%s"/pwm1_enable' '$hmondir'
		printf '\n\techo "c" >"%s"/pp_od_clk_voltage\nelse\n\texit 1\nfi' '$devdir'
	} >>"$scriptpath"/amdocshreset
}

run_overclock_setup() {
	gpu_information="$(cat "$cardnum"/device/pp_od_clk_voltage)"

	check_if_services_installed
	set_power_profile
	set_power_draw
	set_fan_speed
	clocks_and_voltage
	core_profile
	memory_profile
	create_reset_script
	setup_amdocsh
}

check_if_amdocsh_installed() {
	printf "\nChecking for local amdocsh files\n\n"
	if [[ -f "$scriptpath"/amdocshstart ]] && [[ -f "$scriptpath"/amdocshreset ]]; then
		printf "Local amdocsh files were found.\n\n"
		while read -rp "Do you want to install the local amdocsh files? (Y/N|[RETURN]) " yn; do
			case "$yn" in
			[Yy])
				printf "\nSetting up services\n\n"
				setup_amdocsh
				;;
			[Nn] | "")
				printf "\nStarting from scratch...\n"
				run_overclock_setup
				;;
			*) printf "%s\n" "$error_msg" ;;
			esac
		done
	else
		run_overclock_setup
	fi
}

find_gpu() {
	[[ -z "$cardnum" ]] && printf "The following devices are available:\n" &&
		find /sys/class/drm/card*
	while read -rp "Which GPU do you want to target? ([INPUT]/[V]iew/[D]efault|[RETURN]) " num; do
		case "$num" in
		0 | [1-6])
			printf "\nChecking if the GPU exists...\n"
			if cardnum=$(find /sys/class/drm/card"$num" 2>/dev/null | head -1); then
				printf "\nGPU found, starting overclock\n"
				check_if_amdocsh_installed
			else
				printf "Error: GPU not found or input invalid\n"
			fi
			;;
		[Vv]) find /sys/class/drm/card* ;;
		[Dd] | "")
			cardnum=$(find /sys/class/drm/card"$num" 2>/dev/null | head -1)
			check_if_amdocsh_installed
			;;
		*) printf "\n%s\n\n" "$error_msg" ;;
		esac
	done
}

action_prompt() {
	while read -rp "Do you want to prepare installation, uninstall or reset an overclock? (i/r/u/n) " irunt; do
		case "$irunt" in
		[Ii])
			printf "\nStarting overclock\n"
			find_gpu
			;;
		[Rr])
			printf "\nResetting values\n"
			reset_overclock
			;;
		[Uu])
			printf "\nStarting uninstallation process\n\n"
			uninstall_amdocsh
			;;
		[Nn])
			printf "\nExiting.\n"
			exit 0
			;;
		[Tt])
			printf "\nRunning stress test"
			test_gpu
			;;
		*) printf "\n%s\n\n" "$error_msg" ;;
		esac
	done
}

setup_menu() {
	while :; do
		printf "AMD Shell Overclocking Tool Setup Menu \
	\nThis script allows you to change multiple settings related to the hardware and specs of AMDGPU devices.\n"
		read -rp "Do you want to continue? (Y/N) " yn
		case "$yn" in
		[Yy])
			printf "\nStarting setup prompt\n\n"
			action_prompt
			;;
		[Nn])
			printf "\nExiting.\n"
			exit 0
			;;
		*) printf "\n%s\n\n" "$error_msg" ;;
		esac
	done
}

error_msg="Error: input invalid or empty"
script=$(realpath "$0")
scriptpath=$(dirname "$script")
yellow=$(tput setaf 3)
red=$(tput setaf 1)
underline=$(tput smul)
normal=$(tput sgr0)

if [[ -d /sys/module/amdgpu ]]; then
	case "$1" in
	-i | --install)
		cardnum=$(find /sys/class/drm/card"$2" | head -1)
		if [[ -d "$cardnum" ]]; then
			check_if_amdocsh_installed
		elif ! find /sys/class/drm/card*/device -type d >/dev/null; then
			printf "Error: no GPU was found, exiting..."
			exit 3
		else
			printf "Error: GPU number not found, using default value\n"
			cardnum=$(find /sys/class/drm/card* | head -1)
			check_if_amdocsh_installed
		fi
		;;
	-r | --reset) reset_overclock ;;
	-u | --uninstall)
		cardnum=$(find /sys/class/drm/card"$2" | head -1)
		if [[ -d "$cardnum" ]]; then
			uninstall_amdocsh
		else
			printf "Error: GPU number not found, using default value\n"
			cardnum=$(find /sys/class/drm/card* | head -1)
			uninstall_amdocsh
		fi
		;;
	-h | --help) printf "Usage: %s <option>\n\nOptions: \
		\n-i, --install\t\tRun the installer \
		\n-u, --uninstall\t\tRun the uninstaller \
		\n-r, --reset\t\tReset the current amdgpu settings \
		\n-h, --help\t\tDisplay this help message \
		\nNone\t\tTypical setup\n" "$script" ;;
	"") setup_menu ;;
	*) printf "Error: '%s' is not a valid option\n" "$1" ;;
	esac
else
	printf "%sCRITICAL error%s\nThe script cannot identify an amdgpu driver, exiting\n" "$red" "$normal"
	exit 1
fi
